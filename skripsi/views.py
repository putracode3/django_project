from django.shortcuts import render, redirect

import json, ast, math, random
from skripsi.models import CrawlNews, Kelas
from django.http import HttpResponseRedirect

from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger

from Sastrawi.Stemmer.StemmerFactory import StemmerFactory
from Sastrawi.StopWordRemover.StopWordRemoverFactory import StopWordRemoverFactory
# Create your views here.

def masukkan(request):
    return render(request, 'beranda/index.html')


def simpan(request):
    json_data = open('assets/detik.json')
    baca_file = json.load(json_data)
    # baca_file = json.dumps(json_data) // json formatted string

    # json.dumps(json_data)

    for p in baca_file:
        headline = p['headline']
        main_headline = p['main_headline']
        date = p['date']
        url = p['url']
        content = p['content']

        # save if not exist data
        CrawlNews.objects.get_or_create(
            headline=headline,
            main_headline=main_headline,
            date=date,
            url=url,
            content=content
        )

    json_data.close()
    # baca_db = CrawlNews.objects.all().order_by('-id')

    crawls = CrawlNews.objects.all().order_by('-id')
    paginator = Paginator(crawls, 5)
    page = request.GET.get('page')
    try:
        crawls = paginator.page(page)
    except PageNotAnInteger:
        crawls = paginator.page(1)
    except EmptyPage:
        crawls = paginator.page(paginator.num_pages)
    return render(request, 'beranda/simpan.html', {'crawl': crawls})

    # return render(request, 'beranda/simpan.html', {"baca_json": baca_db})


def preproses(request):
    baca_db = CrawlNews.objects.all()
    kounter = 0
    for baca in baca_db:
        kounter += 1
        if kounter > 0 and kounter <= 10:
            # create stemmer
            factory = StemmerFactory()
            stemmer = factory.create_stemmer()
            # stemming process
            sentence = baca.headline + " " + baca.content
            output = stemmer.stem(sentence)
            baca.stemming = output

            # ------------------- Stopword Removal
            fa = StopWordRemoverFactory()
            stopword = fa.create_stop_word_remover()
            kalimat = output
            stop = stopword.remove(kalimat)
            stop = stop.replace(' - ', ' ')
            output = stop
            baca.stopword = output

            baca.save()

    return render(request, 'beranda/preprocessing.html', {"rootword": output, "ori": sentence})


def hitung_term(request):
    baca_db = CrawlNews.objects.all()
    kounter = 0
    for baca in baca_db:
        kounter += 1
        if kounter > 4 and kounter <= 10:
            counts = dict()
            # get from db >> stopword
            str_db = baca.stopword
            words = str_db.split()
            for word in words:
                if word in counts:
                    counts[word] += 1
                else:
                    counts[word] = 1
            baca.count_term = ast.literal_eval(json.dumps(counts))
            baca.sum_all_word = len(counts)
            baca.save()
    return render(request, 'beranda/term.html', {'priview': ast.literal_eval(json.dumps(counts))})

def cluster(request):
    # baca_db = CrawlNews.objects.all()
    baca_db = CrawlNews.objects.exclude(sum_all_word__isnull=True).exclude(sum_all_word__exact='') #get db with sum_all_word not null or ''
    count_doc = baca_db.count() #jumlah dokumen
    print('\nJumlah dokumen = ',count_doc)
    kluster = 3
    lp = 0.5

    # document frequency (df)
    df = dict()
    for i, iterasi_df in enumerate(baca_db, start=0):
        if i < count_doc:
            ct = ast.literal_eval(iterasi_df.count_term)
            for k,v in ct.items():
                if k in df:
                    df[k] += v
                else:
                    df[k] = v
    # print(df)
    # print('---------------^df------------------')

    # term frequency (tf)
    tf = dict()
    for i, iter_df in enumerate(baca_db, start=0):
        if i < count_doc:
            tf_i = df.fromkeys(df, 0)
            ct = ast.literal_eval(iter_df.count_term)
            for ke,va in ct.items():
                if ke in df:
                    tf_i[ke] = va
            tf[iter_df.id] = tf_i
    # print(tf)
    # print('----------------^tf-----------------')

    # inverse document frequency (idf)
    idf = df.fromkeys(df, 0)
    for key,val in idf.items():
        idf[key] = math.log10(1+(count_doc/df[key]))
    # print(idf)
    # print('---------------^idf------------------')

    # bobot tf-idf term (w)
    w = tf
    for ky, vl in tf.items():
        for kkey, vval in vl.items():
            w[ky][kkey] = vval*idf[kkey]
    # print(w)
    # print('---------------^w------------------')

    # find min-max and normalisasi
    min_max = dict()
    for key_a, val_a in w.items():
        for key_b, val_b in val_a.items():
            if key_b not in min_max:
                min_max[key_b] = []
            min_max[key_b].append(val_b)

    maksimal = dict()
    minimal = dict()
    for k_minmax, val_minmax in min_max.items():
        maksimal[k_minmax] = max(val_minmax)
        minimal[k_minmax] = min(val_minmax)

    normalisasi = w
    for k_n, v_n in w.items():
        for k_ns, v_ns in v_n.items():
            if maksimal[k_ns]!=minimal[k_ns]:
                normalisasi[k_n][k_ns] = ((w[k_n][k_ns]-minimal[k_ns])/(maksimal[k_ns]-minimal[k_ns]))*((1-0)+0)
            else:
                normalisasi[k_n][k_ns] = 1.0
    # print(normalisasi)
    # print('---------------^normalisasi min max------------------')

    # inisialisasi bobot klustering som range 0 s/d 1
    w_som = dict()
    ##### Start #####
    # for w_i in range(kluster):
    #     for w_is in range(len(idf)):
    #         if w_i not in w_som:
    #             w_som[w_i] = []
    #         w_som[w_i].append(random.uniform(0,1))

    # w_som = {0: [0.7,0.8,0,0.5,0.2,1,0,0.4,0.6,0.3,0.4,0.6,0,0.2,0.3],1: [0.1,1,0.1,0.4,0.6,0.2,0.7,0.4,0.4,1,0,0,0.7,0,0.7]}
    w_som = {0: [0.3361635322145694, 0.09213261979453147, 0.17972845841755758, 0.9646184272440631, 0.5722801365337342, 0.25548608541523776, 0.31269240004913923, 0.7432396762283836, 0.22023500461916645, 0.20703260726479422, 0.6286391040708883, 0.25380522524197513, 0.8738881173385603, 0.8228351025014498, 0.9341634771515248, 0.4088411433964012, 0.43596867690745644, 0.5980594890724823, 0.5421107277058311, 0.32675954246717953, 0.9556332275956639, 0.7949073131379302, 0.060144361873544216, 0.28546960385338715, 0.47399972833467685, 0.20511401312692956, 0.20106566284814098, 0.41715137866136587, 0.32145918929921635, 0.28104825648823106, 0.5588221427087926, 0.4425529139347453, 0.047727746621666234, 0.4430441686674518, 0.3876292315145634, 0.1612915014894909, 0.47115650598857084, 0.8593609368849541, 0.5518302323894398, 0.5905585681722881, 0.6022139608001799, 0.13338897932340787, 0.6514238306598288, 0.6826388840582633, 0.4139266033414625, 0.23665817079201323, 0.3530414593203254, 0.2093313581320203, 0.0873035215047342, 0.1737878934717827, 0.7108454826792626, 0.23552293242732236, 0.2495077825019908, 0.16863950711044484, 0.1895884016893402, 0.45771128213376955, 0.576437916848271, 0.25528043188336713, 0.45846603495996163, 0.9828558208534706, 0.8046995429102298, 0.36854602931430225, 0.40276703193818686, 0.4169098752729826, 0.6722131571532115, 0.723894920839306, 0.23652081524025648, 0.14873738334865394, 0.8747879975197191, 0.8198182945573529, 0.4255415697490066, 0.04853282830648953, 0.7887881410452755, 0.622422749363411, 0.4788324185531522, 0.4688292420386915, 0.7738905404533059, 0.3094137853619413, 0.07940230010369131, 0.48021932345770546, 0.9072575673146138, 0.22401423653783648, 0.8059891697693259, 0.9024927654657319, 0.18262509630491175, 0.01908090028796261, 0.4849462165795786, 0.04586968513060885, 0.6175964328859483, 0.2283319951786209, 0.730798521157945, 0.4013064267852494, 0.3684762814478074, 0.4240633453913012, 0.27849106232868537, 0.867004671033487, 0.42716504143479295, 0.9785242697374397, 0.25447808434380104, 0.14652970194774761, 0.9163711827112825, 0.4388884832553791, 0.5145263301242928, 0.03966668509540461, 0.6344662811087717, 0.9779585144827296, 0.741875700575684, 0.2024399526122238, 0.8412630290307682, 0.3928610506717167, 0.6334935745754162, 0.10817876238456281, 0.1709480950102903, 0.3155164867979876, 0.2188134681345706, 0.28839268068825463, 0.2453757401535117,0.6155872155311908, 0.9070713802512158, 0.517954228202582, 0.7319162291508522, 0.4726280209032485, 0.6844255396045738, 0.6092805139204646, 0.4763450404692837,0.22156670489589458, 0.46345088463732265, 0.173561932064488, 0.5472497894603271, 0.8563043776709206, 0.24166353967019183, 0.02290528112844148, 0.4808631747885862, 0.6515746681215117, 0.8388982765377515, 0.2649964322283479, 0.2268645193570087, 0.12766924486755304, 0.9759939991793438, 0.6996662215847671, 0.7143475647073629, 0.3157635976832087, 0.7272981781864312, 0.6625488416645873, 0.00019512672340138426, 0.7502138263206067, 0.7335436178060284, 0.525373128024804, 0.04591905413096853, 0.14122614134775557, 0.1512594339433203, 0.5195596922713741, 0.5800268271008453, 0.8280494083899322, 0.4438629610598325, 0.7531098980400867, 0.013878811063481877, 0.7665073687243363, 0.13106209782653966, 0.8595564949132519, 0.011709133607470723, 0.7615445141472484, 0.632148685490796, 0.5981148685872346, 0.8746522751321347, 0.4726270440646979, 0.6842171463670369, 0.1011924764544, 0.9123392015668736, 0.8496231210964483, 0.6782966249173452, 0.43409385709165926, 0.8151101204819167, 0.60501890756812, 0.9655483435638873, 0.1550438117342926, 0.7795559040279535, 0.1491916977934875, 0.38170852466501526, 0.2764995885897883, 0.050016379485014695, 0.5569697873225293, 0.9252961404359274, 0.9601335312315539, 0.1957706362849222, 0.2871132693993722, 0.18708570139429903, 0.7235438050240397, 0.5025075121067515, 0.08895216140233908, 0.9106817764919815, 0.9770724705703854, 0.8940643723245444, 0.6454148212459767, 0.12073140924626824, 0.6336933966869552, 0.5965146217590435, 0.34933248308359244, 0.4786716234584054, 0.5997955430804119, 0.511708496106633, 0.2791889464377908, 0.46342615927989683, 0.541938792789247, 0.6445303570783164, 0.639611371899756, 0.7015612649339763, 0.22769663906180415, 0.1341345305495547, 0.1799161837632398, 0.5643875769214992, 0.6410661188463739, 0.9049937937281667, 0.45307362996838674, 0.194168891088759, 0.39771208915362044, 0.6322179397830793, 0.9137521668241835, 0.023611117240305513, 0.7318224900040201, 0.9577791490380053, 0.2155596737183808, 0.0580834736304896, 0.4005696165216679, 0.0488176084843861, 0.9039900066959372, 0.31258685587270996, 0.8103046588776562, 0.8189718484523115, 0.6861082219457001, 0.8143526717686667, 0.6537591305993297, 0.3725505758296632, 0.31019719424147574, 0.623489792424139, 0.13175741927316098, 0.2643870618014842, 0.048221456299329724, 0.9684396338883017, 0.5481906289944124, 0.6548307299996344, 0.6659989766499473, 0.35841507560960484, 0.8123191492971538, 0.6832633597166939, 0.3069898009432954, 0.7225943501287618, 0.6654091888437397, 0.05990794429020463, 0.19103314856669384, 0.986004867437488,0.39704156422682857, 0.654945216322347, 0.24558033287653158, 0.4260789471244565, 0.671451195775588, 0.08862148824564309, 0.8151011641479569, 0.9989098741945633, 0.13549738548213497, 0.010029776798760603, 0.834625506872773, 0.63267551332505, 0.14477371174861442, 0.6687823718244981, 0.7148018413425608, 0.3047883341437011, 0.6591216283651519, 0.4103079165817194, 0.6127379119924465, 0.07601062227387556, 0.811409594505836, 0.21396765203994794, 0.1292630321865702, 0.9526087170547255, 0.02424010759172046, 0.9650111090717949, 0.2031611043161783, 0.8160957473393802, 0.9294466813743979, 0.2145971576261384, 0.015485084558544915, 0.6936717279467224, 0.13091209813753124, 0.834083601908014, 0.3618257787328565, 0.8676526713992683, 0.21541813220697148, 0.0819173583996905, 0.41210583142466306, 0.761633585237098, 0.14229495747732612, 0.12296542242748221, 0.5922395508912854, 0.23170822660284351, 0.9515881256254487, 0.2663834477128376, 0.2292898536830139, 0.28725474655030114, 0.3045437779687056, 0.3402420872643791, 0.8472526721588479, 0.5561261157697638, 0.3526343065054698, 0.7814553892691486, 0.7035533175721805, 0.5422902679016985, 0.1394240181023354, 0.8998127919922534, 0.32794628081071675, 0.9708253602226112, 0.5707717069700654, 0.9868393034707126, 0.7476690092578291,0.5687231240103233, 0.32693872738283924, 0.39695366716172586, 0.665741207461112, 0.11420714008007138, 0.056668712415194555, 0.03508907124192451, 0.5324708003367227, 0.08001075232303323, 0.6093935541842835, 0.7451312652176056, 0.5805181283235779, 0.30245442444011483, 0.4543139607426939, 0.39436425388303087, 0.19002830123249137, 0.1718617041174757, 0.5872614705168087, 0.31405435740893173, 0.5403844828217186, 0.17290191345317807, 0.49088322980319876, 0.2416771951924107, 0.7779514443245634, 0.9168330827900243, 0.31056706249681376, 0.395333228611489, 0.22325902986138313, 0.826229570255928, 0.6729437203824669, 0.6946744315303229, 0.9245112346475359, 0.3714615118693462, 0.3716575212713673, 0.7567499163914807, 0.2654359927162949, 0.1229773689018192, 0.12218349125301908, 0.9219469365825287, 0.5317577262185812, 0.11690263792773758, 0.39728629743009414, 0.8748153643620937, 0.746374366999267, 0.2827008862295134, 0.220794242363622, 0.9613046052009034, 0.2536401075925061, 0.7036182766126052, 0.912954161088572, 0.6328791036058747, 0.12042913139084654, 0.5902930810623107, 0.060439783948677106, 0.7185374551670294, 0.07750453891287767, 0.03754352153319662, 0.4480348009806622, 0.9167966495774377, 0.354491300265257, 0.9919463838443746, 0.4818293360572138, 0.3193639166914952, 0.0945812724576699, 0.5877359004860647, 0.3326864979860279, 0.9823089986846427, 0.8235047636869298, 0.4550795475727166, 0.24513485673641955, 0.26926753687707883, 0.38146042136699787, 0.5509905572771072, 0.3374718482952712, 0.7443577335529481, 0.05028911263697944, 0.6037411807114955, 0.21812707562929123, 0.9748935655502335, 0.07750909512811655, 0.21461461976144913, 0.4003050369749931, 0.27804346578114103, 0.27143769164148845, 0.6551204905012158, 0.38288009240827037, 0.9911870037032895, 0.5115406285872861, 0.9955148436329648, 0.15059241589048977, 0.11462161399598592, 0.1612057801769854, 0.6883114473702574, 0.48913437147914474, 0.7628811285548539, 0.9968085005325011, 0.7947342780030856, 0.17444191580561152, 0.5980202287717954, 0.3841068760455678, 0.5073717560163996, 0.6154444883926744, 0.3627897097256618, 0.8373161407568137, 0.5563986322271693, 0.9072420676133067, 0.9580948046992105, 0.21166727354212367, 0.6772403050702795, 0.949431742980797, 0.9145509364174236, 0.7651421431816396, 0.11150028963348013, 0.41300654995593955, 0.10916744206894913, 0.5560358502518967, 0.34054185418600225, 0.866324752787013, 0.28611130754836067, 0.4119604774453962, 0.5260421592784289, 0.9740564659462061], 1: [0.32200435209147393, 0.9622290074878788, 0.5926987235102564, 0.0706735449776954, 0.7483147650468749, 0.7620994960494902, 0.37845403395992383, 0.4135101832409207, 0.15136863333540795, 0.46712293951793127, 0.7831049934794807,0.6790244052567873, 0.6540199386160981, 0.12048557319272235, 0.34860821407416387, 0.8011547574993558, 0.22526223817991675, 0.9267725215895252, 0.38371043382715875, 0.6333296471070884, 0.7513528291833962, 0.6804334383800196, 0.07015027404284102, 0.09388891625497753, 0.2566829351766873, 0.9502432087151238, 0.9138778322394926, 0.9746240400477393, 0.40714835339877553, 0.2708047571473833, 0.4624612688488683, 0.3609013779310747, 0.19039957631881665, 0.7101547416579095, 0.12158123418442235, 0.224091565555525, 0.04825814652698124, 0.27715601806112167, 0.828311003859502, 0.1807863343681776, 0.7015185505163596, 0.01183914924053886, 0.5363213763783441, 0.8371001881095694, 0.30911218319462375, 0.9513163906067513, 0.6699120885686775, 0.7675888967047516, 0.7536675210487758, 0.054552037603590176, 0.4705828025477691, 0.24628231893056418, 0.04817825998160019, 0.6076281846226462, 0.7872830664291705, 0.15524568386977422, 0.23459272726616742, 0.7098680279597626, 0.902881065510702, 0.8532211776532685, 0.4051573096547356, 0.15648361632555496, 0.9884348615835813, 0.6319785215170011, 0.059140983582053, 0.7586122569323603, 0.09979003638915473, 0.4966337277841829, 0.8030315441071731, 0.6472833426345027, 0.9261203467584956, 0.8358168421872857, 0.24117345044517946, 0.9903186222672327, 0.2936453247517977, 0.5469867082290287, 0.3830334273491328, 0.41872885697151885, 0.9945854202138448, 0.33601736226034173, 0.77058026831345, 0.6284752261758411, 0.15614490339662013, 0.12987983722164687, 0.4949087662115774, 0.31082408748771206, 0.0594993089104916, 0.7260228491700321, 0.10681226523835718, 0.03631414384438103, 0.43961848338357545, 0.20959298569353213, 0.6593405895200167, 0.700900757139858, 0.3252733926875929, 0.7761127416485338, 0.20014206480281527, 0.7621421500677666, 0.9892801709797147, 0.6404705253754426, 0.75553722705936, 0.38168345892467337, 0.2700100244883301, 0.8353292945391924, 0.7606956221824659, 0.3652221009608737, 0.13042653305108465, 0.22921996303151448, 0.560403015378483, 0.8583072393219614, 0.013147714045398828, 0.8597330129954295, 0.7259298303636287,0.8250879208759032, 0.2466312510763572, 0.8494391367445332, 0.40067574365129643, 0.15575925799981594, 0.4182761632019958, 0.529407601245326, 0.9115577720160786, 0.7129325854187547, 0.8762798647493465, 0.501449530858612, 0.3537189506567324, 0.11226199857808539, 0.5623855870280914, 0.9297720532662714, 0.6890273527916239, 0.4107700497406468, 0.7050124332055792, 0.5529823715072535, 0.07364373599467788, 0.7597174040901502, 0.7475766367220079, 0.23011198362640994, 0.044561524769096916, 0.4595661495673309, 0.9009551268912636, 0.5239963882202594, 0.5530343742629859, 0.6045354173194629, 0.8772129273186138, 0.3209374676642769, 0.9126173368511403, 0.3330208735007235, 0.4799262426471964, 0.7623232132493096, 0.4268052895271093, 0.1677932383909807, 0.9920199196295769, 0.4415760282188659, 0.22517748772178503, 0.008397855911598473, 0.6822176797597659, 0.6981433983248608, 0.7756278839396218, 0.27680565990112216, 0.12020940601873087, 0.2338037362205242, 0.948471394116519, 0.06345998696954058, 0.24444862873013107, 0.1904746061598519, 0.35711738141669, 0.496074217440414, 0.606614822693247, 0.030086688420824736, 0.8458076042792528, 0.4127905796558301, 0.813431128865199, 0.07600849878433524, 0.4831900042030791, 0.45244919576972564, 0.3787649303599705, 0.5965271403289717, 0.906675473150025, 0.8338303401770742, 0.7244443771942342, 0.1788475079873535, 0.45668504714038394, 0.3217926686153004, 0.7219231605473362, 0.33220758329799005,0.8655946912577271, 0.39956489330510847, 0.5557021363484327, 0.0069073394348689865, 0.013616744771554723, 0.06455837995946423, 0.7496045382571596, 0.11762504357424652, 0.9782358969632818, 0.3859569250354148, 0.48001574826026383, 0.3753481073085565, 0.02363637427030507, 0.7516897715932266, 0.7619263496562246, 0.5250073306838956, 0.17504438238889697, 0.5484656759825638, 0.3370140459319304, 0.8088368474173001, 0.07076282351507024, 0.9154990379317889, 0.43971398716986276, 0.170067677307277, 0.854004710136502, 0.3794780721426171, 0.9060739515222068, 0.1119775415778067, 0.7476675569403157, 0.13561622792793926, 0.939215393813928, 0.3521305883420297, 0.7090978760267944, 0.9452139525458869, 0.48008828024482364, 0.7996137196160643, 0.8988202373069712, 0.10372829545113205, 0.23420041044606354, 0.9602248029894617, 0.16160568717902357, 0.6539197450514581, 0.6485314123929239, 0.3060774265820563, 0.7521444485605976, 0.07819425599184415, 0.9700027087931063, 0.14577086233208825, 0.6694031000736905, 0.8093840154920394, 0.27473751177890937, 0.355838034315058, 0.6605522030335689, 0.27000545352296224, 0.19028790217966174, 0.15282914807917136, 0.4011960694092078, 0.44868585262021077, 0.12965354367835047, 0.031915200434811, 0.35322995991204964, 0.9896335825143432, 0.2227558146832086, 0.22761455325562852, 0.33403530366717615, 0.20237331565168848, 0.11718561186303744, 0.09180280626375348, 0.3987276637035987, 0.22708868234553847, 0.5565071280703359, 0.8418225880294212, 0.15879499960204957, 0.0663760972490216, 0.33250702594068393, 0.8181898636451282, 0.4296770326653204, 0.7193028365009888,0.9289547827006124, 0.39069797397866446, 0.40219182254893693, 0.027006819797903314, 0.7511490836840397, 0.5220165675170567, 0.6488559852557916, 0.6582153260423919, 0.5991527181281455, 0.725565295690571, 0.12240409391740037, 0.9186759196278429, 0.14717207903028495, 0.12064893147434241, 0.6439410178412881, 0.6236805710597236, 0.8709741363372818, 0.16064267646662522, 0.9934967150093907, 0.3959543296513103, 0.9097827187585753, 0.8371560001960896, 0.17221326953674754, 0.7100976091382462, 0.13485212630362953, 0.696529931853356, 0.8656405171149539, 0.48598586247692865, 0.4645390718582164, 0.10871949534136671, 0.4343729635942043, 0.9035012933791244, 0.07250130544009714, 0.17820754703314856, 0.9058328967866219, 0.6831057545250566, 0.024224408183559643, 0.2887768910227815, 0.14241414638050254,0.4473361033587565, 0.2497050518771562, 0.846313354773172, 0.9468989441203769, 0.717728467663251, 0.15007117879614518, 0.05976325243869396, 0.8754634671748118, 0.8237387338448272, 0.0342544133992575, 0.7114226883813675, 0.4879506723059709, 0.21173696981001633, 0.630284067490085, 0.15204530552171946, 0.5286855947265298, 0.8163383135810237, 0.9133455947650557, 0.25851521036458414, 0.3884922188439468, 0.7681638797310307, 0.29577692130100297, 0.9231840802428141, 0.44494241521091704, 0.2983036475100912, 0.20482017443895162, 0.01987894760880149, 0.8773739123664692, 0.46784200433932, 0.1746096829564716, 0.93123360625901, 0.38380285086219235, 0.6793007819064045, 0.7349002642940143, 0.6032838481260201, 0.32810443983074633, 0.33262772431740983, 0.5768594723932708, 0.2211892698547726, 0.19823923371919638, 0.37240976935058434, 0.9143935888412342, 0.5906440614183028, 0.4462422193341502, 0.34730043576239333, 0.24021154724913352, 0.42412907569945957, 0.6775409105533026, 0.611656136409543, 0.2678454544243384, 0.2004626209221877, 0.7611590653221568, 0.3806474369964984, 0.6418901482003893, 0.6135221094825769, 0.9476304190239807, 0.012220430088338619, 0.47761654412403365, 0.35599654023162564, 0.8386644670885749, 0.9448918854372093, 0.9415561058151956, 0.3652539111070997, 0.3043704675151454, 0.40128548367060757, 0.9669735425727455, 0.8103993107607538, 0.761214600341599, 0.6379059195724281, 0.23262281336006274, 0.17081410100307504, 0.9725023508996029, 0.9544944118134073, 0.5282448014267429, 0.7867804235967396, 0.6146503832447545, 0.5693183907683024, 0.5175480204879283, 0.23961968101240017, 0.05531522688833013, 0.8914423055779951, 0.9281725139009905, 0.4999005294699811, 0.8561286624031627, 0.28905188911387736, 0.399945464536438, 0.012739801334284762, 0.09159601907580994, 0.222726958727822, 0.4739962012959108, 0.9704907980150732, 0.025650286093864216, 0.1940309226553384, 0.04188682392035603, 0.25304559355191447, 0.2799801949825311, 0.1701371714671941, 0.5841614003295164, 0.1036517067274757, 0.5757135186666126, 0.6896532234375414, 0.5706917098936852, 0.05086549809460372, 0.1978588357109704, 0.4616099058872579, 0.08958128309010494, 0.25970217209873014, 0.5135773306758126, 0.7688376649196046, 0.5243229351051694,0.7590144520258439, 0.2232564989468796, 0.10365221745629172, 0.7293254499949404, 0.3745718578652516, 0.7659592498909245, 0.3004058490318855, 0.44040010623336934, 0.932666200694572, 0.044893100620606474, 0.14332000429242153, 0.8509409575181661, 0.32583889154908285, 0.8769588980897783, 0.22566310630541064, 0.15705130517160204, 0.45660858806777904, 0.2607985467036731, 0.8961965299325522, 0.7364651339277195, 0.040784319271733205, 0.2410145501056984, 0.9969117641168196, 0.7526431968060187, 0.2601757387032949], 2: [0.6296449716283662, 0.5989123014879263, 0.2105504473936367, 0.5422628194696651, 0.20522122678581434, 0.2686916611546153,0.5942357953017648, 0.9418946983959394, 0.3134066569833509, 0.5753726458252788, 0.14147144729292815, 0.37679899590720733, 0.43787679956840786, 0.9603341828940807, 0.1324123911280004, 0.6579475933343549, 0.8914887626436642, 0.49997319778955773, 0.04651035478649668, 0.11141644951066765, 0.7210531926367374, 0.9678131540621402, 0.5872980874969307, 0.4428690942343466, 0.8471807822512424, 0.2859988180586531, 0.9089718206392088, 0.25515707057054804, 0.8690975073916756, 0.49518678099462654, 0.5603773969295436, 0.6614470768082255, 0.7751826728240431, 0.48193324173429075, 0.262849467419889, 0.0900936472400995, 0.9172458540770487, 0.705821509657475, 0.801684000123986, 0.11994026415998438, 0.768404053558178, 0.18760218846752608, 0.411731089170532, 0.03676944696783524, 0.6531387479178404, 0.9326756794301705, 0.2978599450079935, 0.8245509522669636, 0.24837395673170326, 0.29302291432352123, 0.6656465224771932, 0.8059498897439431, 0.554402722194748, 0.5043408302104377, 0.6688529417628453, 0.6718855346310401, 0.6041844708113823, 0.8263276968748217, 0.8827398089867831, 0.20526204265859105, 0.5498509210119924, 0.5220693364918226, 0.9119097543535495, 0.3285900956822797, 0.1801205542968891, 0.7080348693751701, 0.7969494474736463, 0.1266490119122502, 0.42176273175880996, 0.7234124658027067, 0.7628543627593328, 0.9975381003365439, 0.44479884773314793, 0.6051010073084889, 0.8286646377956074, 0.9489893740029258, 0.5079081565489575,0.4508213591559884, 0.5775396857585162, 0.32898611878356565, 0.6765642900660377, 0.36035191937852107, 0.6717763694230338, 0.7429402491986499, 0.8505654198915914, 0.20195997859200332, 0.7448540273170684, 0.6045120242100586, 0.8901165753268037, 0.2554778199694019, 0.23017287596397562, 0.21496784220630105, 0.022401933704160104, 0.35402803227546586, 0.30698502506739, 0.54985272936127, 0.4390336616010224, 0.4409223700198115, 0.11141589390004658, 0.29554638070662076, 0.07770625565389189, 0.4820051625959809, 0.17692474009737458, 0.6910520886788467, 0.4317931299218466, 0.4726852495469319, 0.7118057209755286, 0.9031505017934267, 0.6494224758618823, 0.42620310647305715, 0.2281376295275097, 0.6707812095088468, 0.1809603704964179, 0.5592101110324105, 0.41409680113846703, 0.9809692762040808, 0.6890831617955229, 0.719049459417926, 0.9165878964901993, 0.9177515603084024, 0.7342580184750628, 0.8564004130458683, 0.14324410082553451, 0.035704586826826534, 0.0046909311902835205, 0.6281158222120767, 0.20440271814839872, 0.8530492661615433, 0.04196981544033429, 0.6814486098920265, 0.4902179574982187, 0.5176471643579135, 0.9673805909232995, 0.18974734310925712, 0.7246080798394136, 0.7227345203051501, 0.05014262020423177, 0.7803970360075474, 0.6338140947059601, 0.3129485074809548, 0.8322488933771671, 0.9411701542063009, 0.0487534771177065, 0.8460374185462326, 0.5405662206187544, 0.6540464084525351, 0.712636736362587, 0.6439248095366719, 0.9385359543215706, 0.8119563323704186, 0.6683454277681666, 0.439058086031494, 0.3557358303158288, 0.8318380979802431, 0.32053926346398887, 0.8623796368678392, 0.1824314482470336, 0.9810998501906644, 0.34544763449068483, 0.9002110765728059, 0.34257542513374095, 0.6762921448203166, 0.028254521541400623, 0.7444010332395095, 0.01763377324520854, 0.9037186196771694, 0.3151966709653916, 0.12206474881844365, 0.45984535183878494, 0.0688268217745186, 0.6862085481540273, 0.5635977892342198, 0.027557980843474827, 0.023223549021010648, 0.5676803242969535, 0.7273863739889945, 0.11266474385957159, 0.3674560070092088, 0.10806040800030081, 0.001427029454389106, 0.9332812803169623, 0.984326054916968, 0.5187390278785268, 0.952977799969046, 0.11681136837559358, 0.8528377679159, 0.51120776548472, 0.6649711415938772, 0.7134065787593588, 0.32388155775708705, 0.9538670832279946, 0.6103902317761309, 0.48622958246203063, 0.6392496731892657, 0.26955386142177584, 0.018915596428975, 0.38227869401401715, 0.2765909262406211, 0.5084011888417452, 0.0369547602795699, 0.742867610808512, 0.6357238052134294, 0.8853891032358195, 0.2646504189027733, 0.752612378892155, 0.4151169771988866, 0.8080694990312807, 0.11442385653716391, 0.2444360490828481, 0.6671518353871054, 0.2576041628855801, 0.17215612958213622, 0.5201599044514407, 0.9371973403358792, 0.6562978956451808, 0.707296263304338, 0.9180980855204446, 0.9707467642000389, 0.7498531473264262, 0.43509572751539716, 0.8559840534119997, 0.6001333248448283, 0.3895841625191693, 0.6019695974985133, 0.8446751867520452, 0.7884060389036098, 0.339095163810776, 0.13549373064010972, 0.8669682246769255, 0.2196532484540058, 0.6533917888475561, 0.9235950776480427, 0.8043071939643509, 0.5357869118402755, 0.2623420578688944, 0.7122311695737409, 0.9197558139078938, 0.1077404792324913, 0.5453271937656684, 0.9050805271955618, 0.04304842615637405, 0.8897625282271813, 0.06358585721806542, 0.20089944593756748, 0.4200557382101775, 0.22362538131126397, 0.36156393210567206, 0.4465603213360353, 0.42532289145182456, 0.9291075812797466, 0.9803913966443711, 0.23654646113598565, 0.7091948335444814, 0.3445652671592824, 0.9109360670326629, 0.09150006985560144, 0.05557253403645723, 0.21314350182997632, 0.9198609742664122, 0.9188722043329882, 0.1433198193880495, 0.802687262066289, 0.2699495714674549, 0.17839002908823098, 0.8198360661867221, 0.7644636594308988, 0.4542904479350297, 0.5223171120425055, 0.8442675889857367, 0.29540221055773874, 0.28705721795285344, 0.23620806394292004, 0.36877708266037, 0.13711671728026165, 0.6728506029363297, 0.6053370578019077, 0.7915422764014165, 0.05067973963842498, 0.9982540692127344, 0.7505222817032976, 0.7652241024506573, 0.14954814430525876, 0.8967586907727113, 0.979738379105678, 0.09296715089058871, 0.6605784307895313, 0.5233744042885831, 0.2078875450789649, 0.4137114972334156, 0.2253736111414546, 0.3329803133098176, 0.6155914587137765, 0.8499424864360345, 0.26465075943472793, 0.9952573708926418, 0.20476641933995732, 0.46603756650148065, 0.317458719336985, 0.6442586213673978, 0.8242570311189479, 0.5426411404529491, 0.3918597295394123, 0.2350531169722364, 0.8318290089856706, 0.24874760063748158, 0.8690983412199718, 0.0232145368165686, 0.43314828991593346, 0.3074066357041215, 0.6178586868293093, 0.43550259045147843, 0.23756173426270133, 0.815713792255526, 0.8168181412098244, 0.3805889891470029, 0.6815325346695137, 0.8879451028717655, 0.2479585977743235, 0.3976094011864941, 0.8711281723894081, 0.9191369156959227,0.2777521774430499, 0.015260874679983827, 0.19979151705542897, 0.4785239526728666, 0.5827452481000468, 0.32994886241528887, 0.052566349349214114, 0.6568524587221587, 0.4586394248492055, 0.3268664012588348, 0.7573520304030642, 0.31027358961963125, 0.005609399341880983, 0.26998236680475207, 0.17191960003487716, 0.00327119604951831, 0.8054706039201323, 0.2838006802274279, 0.27285231876831273, 0.33536200265971994, 0.9470125010894241, 0.33307388586823417, 0.7046922230965429, 0.12656997509676082, 0.8638547801720192, 0.8762805142020217, 0.4036319291833519, 0.18044704599291284, 0.7059605053603483, 0.06305817288558258, 0.472381262730873, 0.6573349888574492, 0.960888633518716, 0.3373133701748652, 0.18351695279384872, 0.4742686240668076, 0.9271398366158523, 0.912377927420511, 0.4850640253455527, 0.04767567004264339, 0.7699404746483198, 0.2557500990794077, 0.7305670277061423, 0.8809737785715953, 0.9997471709740383, 0.7874937226553962, 0.8458150420623934, 0.05525067328679456, 0.7260832315103634, 0.5737621431899785, 0.376904147725847, 0.28721422964707655, 0.46495331275272944, 0.3202941602709005, 0.9726359187248533, 0.8209034943453377, 0.8120183023232473, 0.9557922092537059, 0.38620972980388535, 0.6839807816946764, 0.6273911441448666, 0.9232674940262424, 0.007424304568109719, 0.05485535282880405, 0.34870388918550743, 0.1989973002881612, 0.8098451420630524, 0.02429715751823569, 0.7394822961825372, 0.26571435487514106, 0.9192579798284678, 0.08060020839877491, 0.8031360788016816, 0.5266329250369449, 0.7088779360429064, 0.9410644549088873, 0.16632670528595805, 0.037536206813137074,0.27661972474035146, 0.8184498828809701, 0.47789451506849356, 0.46112556632987145, 0.06714711371416926, 0.005182305413367283, 0.09953855767024855, 0.31012069468797354, 0.8877883998641849, 0.05801800228787546, 0.5041722141419942, 0.07146326911922996, 0.41933325644633723, 0.1852902490956122, 0.8104063322776522, 0.4823018221807618, 0.6251596830732223, 0.19250974500693852, 0.7845952718848557, 0.6441629273606104, 0.6823025244824239, 0.7288435234791039, 0.41681107997128974, 0.8722204665572749, 0.9396370359025266, 0.760887603881923, 0.27629271203430694, 0.6955797484656693, 0.5737592554105749, 0.8999417364109588, 0.3535286293873454, 0.959105716490085, 0.6393658967648266, 0.7269603699040624, 0.45493226161188227, 0.9153423375697042, 0.43765745088062546]}
    ##### End #####

    # print(w_som)
    # print('===========')
    
    # print(normalisasi)
    # print('-----------')
    w_d = dict()

    ##### Start #####
    for k_wd, v_wd in normalisasi.items():
        w_d[k_wd] = list(v_wd.values())
        # print(k_wd, ' = ', sum(v_wd))

    # w_d = {1: [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 2: [1.0, 0.0, 0.5,0.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0],3:[0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,0.0,0.0],4:[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,1.0,1.0]}
    ##### End #####
    # print(w_d) #*********** .:-[ w_d AMAN ]-:. ***********
    print('=======================')
    d_som = dict()
    index_update_new = []
    index_update_old = []
    status_konvergen = 0
    ku = dict()  # kluster_update
    
    print(w_d)
    jml_iterasi = 0
    while status_konvergen == 0:
        jml_iterasi += 1
        del index_update_new[:] #to empty list
        ku = ku.fromkeys(ku, 0)  # resete dict

        # -----------------------------------------------
        for k_wd, v_wd in w_d.items(): #4 bobot dokumen i => mulai dari 1
            print('---------***-------------')
            print('dokumen ke => ',k_wd)
            wsiu = int() #w_som_index_update untuk menampung index w_som mana yang akan diperbarui
            for ci in range(kluster): #3 perulangan sesuai berapa jumlah kluster => mulai dari 0
                if k_wd not in d_som:
                    d_som[k_wd] = {'d':{ci:float()}} #inisialisasi d_i
                else:
                    d_som[k_wd]['d'].update({ci: float()}) #inisialisasi d_i

                d_i = float()
                for w_som_i in range(len(w_som[ci])):
                    d_i += (w_som[ci][w_som_i]-w_d[k_wd][w_som_i])**2
                d_som[k_wd]['d'][ci] = d_i

                # >>> d = {320:1, 321:0, 322:3}
                # >>> min(d, key=lambda k: d[k]) 
                # if ci > 0: #cek d_som terkecil
                #     wsiu = ci if (d_i < d_som[k_wd]['d'][ci-1]) else (ci-1)                
                print('>>', ci, ' ', d_som[k_wd]['d'][ci])
            print('cek data: ', d_som[k_wd]['d'], '\n>> data minimal = ', min(d_som[k_wd]['d'], key=lambda k: d_som[k_wd]['d'][k]))
            wsiu = min(d_som[k_wd]['d'], key=lambda k: d_som[k_wd]['d'][k])
            for wsi in range(len(w_som[ci])): #update bobot w_som yang D terkecil
                w_som[wsiu][wsi] = w_som[wsiu][wsi]+lp*(w_d[k_wd][wsi]-w_som[wsiu][wsi])
            index_update_new.append(v)
            ku[k_wd] = wsiu
            print('index w yang diupdate => index = ', wsiu)
        # -----------------------------------------------

        print("\nIterasi ke-",jml_iterasi,' dengan laju pembelajaran ',lp)
        if len(index_update_old) > 0:
            perubahan = 0 #0=tidak ada perubahan, 1=ada perubahan
            for i_index in range(len(index_update_old)):
                if index_update_new[i_index] != index_update_old[i_index]:
                    perubahan = 1
                    print('ada yang tidak sama')
            if perubahan == 0:
                for key_ku, val_ku in ku.items():
                    t = CrawlNews.objects.get(id=key_ku)
                    t.kluster = val_ku
                    t.save()
                status_konvergen = 1
            print("-> Sudah konvergen? ", ("ya" if perubahan==0 else "tidak"))
            print("-> Hasil cluster = ", index_update_new)
            print("----------------------------\n \n")
        else:
            index_update_old = index_update_new[:]
            print('-> Inisialisasi')
            print("-> Hasil cluster = ", index_update_new)
            print("----------------------------")
        lp = lp * 0.6
    print("=========================")
    print('Jumlah iterasi = ', jml_iterasi)
    print("=========================\n",)
    return redirect(request.META.get('HTTP_REFERER'))

def manual_class(request):
    return redirect(request.META.get('HTTP_REFERER'))
    if request.method == 'POST':
        form_data = request.POST

        kelas_id = '1'
        if form_data['data_baru'] != '':
            kelas = Kelas(
                nama=form_data['data_baru'],
            )
            kelas.save()
            print('simpan baru')
            kelas_id = kelas.pk
        else:
            print('data lama')
            kelas_id = form_data['data_lama']

        index_crawl_news = CrawlNews.objects.get(id=form_data['data_id'])
        index_crawl_news.kelas_id = kelas_id
        index_crawl_news.save()
        return redirect(request.META.get('HTTP_REFERER'))

    kelas = Kelas.objects.all().order_by('nama')

    crawls = CrawlNews.objects.all().order_by('-id')
    paginator = Paginator(crawls, 5)
    page = request.GET.get('page')
    try:
        crawls = paginator.page(page)
    except PageNotAnInteger:
        crawls = paginator.page(1)
    except EmptyPage:
        crawls = paginator.page(paginator.num_pages)
    return render(request, 'beranda/manual.html', {'combo': kelas, 'crawl': crawls})
